// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tak/proto/taktician.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	tak/proto/taktician.proto
	tak/proto/model.proto
	tak/proto/corpus_entry.proto

It has these top-level messages:
	AnalyzeRequest
	AnalyzeResponse
	ModelDef
	CorpusEntry
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AnalyzeRequest struct {
	Position string `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Depth    int32  `protobuf:"varint,2,opt,name=depth" json:"depth,omitempty"`
	Precise  bool   `protobuf:"varint,3,opt,name=precise" json:"precise,omitempty"`
}

func (m *AnalyzeRequest) Reset()                    { *m = AnalyzeRequest{} }
func (m *AnalyzeRequest) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeRequest) ProtoMessage()               {}
func (*AnalyzeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AnalyzeRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *AnalyzeRequest) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *AnalyzeRequest) GetPrecise() bool {
	if m != nil {
		return m.Precise
	}
	return false
}

type AnalyzeResponse struct {
	Pv    []string `protobuf:"bytes,1,rep,name=pv" json:"pv,omitempty"`
	Value int64    `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	Depth int32    `protobuf:"varint,3,opt,name=depth" json:"depth,omitempty"`
}

func (m *AnalyzeResponse) Reset()                    { *m = AnalyzeResponse{} }
func (m *AnalyzeResponse) String() string            { return proto.CompactTextString(m) }
func (*AnalyzeResponse) ProtoMessage()               {}
func (*AnalyzeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AnalyzeResponse) GetPv() []string {
	if m != nil {
		return m.Pv
	}
	return nil
}

func (m *AnalyzeResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *AnalyzeResponse) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func init() {
	proto.RegisterType((*AnalyzeRequest)(nil), "tak.proto.AnalyzeRequest")
	proto.RegisterType((*AnalyzeResponse)(nil), "tak.proto.AnalyzeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Taktician service

type TakticianClient interface {
	Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
}

type takticianClient struct {
	cc *grpc.ClientConn
}

func NewTakticianClient(cc *grpc.ClientConn) TakticianClient {
	return &takticianClient{cc}
}

func (c *takticianClient) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := grpc.Invoke(ctx, "/tak.proto.Taktician/Analyze", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Taktician service

type TakticianServer interface {
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
}

func RegisterTakticianServer(s *grpc.Server, srv TakticianServer) {
	s.RegisterService(&_Taktician_serviceDesc, srv)
}

func _Taktician_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TakticianServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tak.proto.Taktician/Analyze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TakticianServer).Analyze(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Taktician_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tak.proto.Taktician",
	HandlerType: (*TakticianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Analyze",
			Handler:    _Taktician_Analyze_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tak/proto/taktician.proto",
}

func init() { proto.RegisterFile("tak/proto/taktician.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xcd, 0xae, 0xb5, 0xcd, 0x1c, 0x2a, 0x04, 0x0f, 0xe9, 0x9e, 0xc2, 0x9e, 0x72, 0xda,
	0x82, 0xfe, 0x02, 0x7b, 0x17, 0x21, 0x78, 0x12, 0x2f, 0x69, 0x1d, 0x30, 0x6c, 0x49, 0xc6, 0x66,
	0xba, 0xa0, 0xbf, 0x5e, 0xdc, 0xd8, 0x55, 0xa1, 0xb7, 0xf9, 0x78, 0xf0, 0xbd, 0x79, 0xb0, 0x62,
	0xdf, 0xaf, 0xe9, 0x90, 0x38, 0xad, 0xd9, 0xf7, 0x1c, 0x76, 0xc1, 0xc7, 0x6e, 0x64, 0x25, 0xd9,
	0xf7, 0xe5, 0x6c, 0x5f, 0x60, 0x79, 0x1f, 0xfd, 0xfe, 0xe3, 0x13, 0x1d, 0xbe, 0x1f, 0x31, 0xb3,
	0x6a, 0x60, 0x41, 0x29, 0x07, 0x0e, 0x29, 0x6a, 0x61, 0x84, 0x95, 0x6e, 0x62, 0x75, 0x03, 0xb3,
	0x57, 0x24, 0x7e, 0xd3, 0x95, 0x11, 0x76, 0xe6, 0x0a, 0x28, 0x0d, 0x73, 0x3a, 0xe0, 0x2e, 0x64,
	0xd4, 0xb5, 0x11, 0x76, 0xe1, 0x4e, 0xd8, 0x3e, 0xc0, 0xf5, 0x64, 0xcf, 0x94, 0x62, 0x46, 0xb5,
	0x84, 0x8a, 0x06, 0x2d, 0x4c, 0x6d, 0xa5, 0xab, 0x68, 0xf8, 0x56, 0x0e, 0x7e, 0x7f, 0xc4, 0x51,
	0x59, 0xbb, 0x02, 0xbf, 0x45, 0xf5, 0x9f, 0xa2, 0xdb, 0x47, 0x90, 0x4f, 0xa7, 0x29, 0x6a, 0x03,
	0xf3, 0x1f, 0xb7, 0x5a, 0x75, 0xd3, 0xa0, 0xee, 0xff, 0x9a, 0xa6, 0x39, 0x17, 0x95, 0x57, 0xda,
	0x8b, 0xcd, 0xe5, 0x73, 0x45, 0xdb, 0xed, 0xd5, 0x18, 0xdf, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x26, 0xc1, 0x22, 0x6b, 0x32, 0x01, 0x00, 0x00,
}
