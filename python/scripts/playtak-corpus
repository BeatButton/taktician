#!/usr/bin/env python
import tak.ptn
import tak.symmetry

import attr

import argparse
import csv
import hashlib
import json
import os.path
import sqlite3
import struct
import subprocess
import sys

FLAGS = None
GAMES_DIR = os.path.join(os.path.dirname(__file__), "../../games")

@attr.s
class Position(object):
  day  = attr.ib()
  id   = attr.ib()
  pos  = attr.ib()
  ply  = attr.ib()
  move = attr.ib()

def seeded_hash(data):
  data = data + (FLAGS.seed,)
  h = hashlib.sha256(b"\0".join([str(d).encode('utf-8') for d in data])).digest()
  v, = struct.unpack("Q", h[:8])
  return v

def want_move(day, id, i):
  if i < FLAGS.skip:
    return False
  if FLAGS.stride:
    return (i - FLAGS.skip) % FLAGS.stride == 0
  v = seeded_hash((day, id, i))
  return v % FLAGS.sample == 0

def in_test_set(day, id):
  if FLAGS.test_fraction == 0:
    return False
  v = seeded_hash((day, id))
  return v < (FLAGS.test_fraction * (1 << 64))

def main(args):
  db = sqlite3.connect(os.path.join(GAMES_DIR, "games.db"))
  cur = db.cursor()
  sql = '''
SELECT day, id
FROM games g, ratings r1, ratings r2
WHERE r1.name = g.player1
 AND r2.name = g.player2
 AND NOT r1.bot AND NOT r2.bot
 AND r1.rating >= :rating
 AND r2.rating >= :rating
 AND size = :size
ORDER BY day ASC,id ASC
  '''
  if FLAGS.limit:
    sql += ' LIMIT :limit'
  cur.execute(sql, {
    'rating': FLAGS.rating,
    'size': FLAGS.size,
    'limit': FLAGS.limit
  })

  train = []
  test = []

  for (day, id) in cur:
    with open(os.path.join(GAMES_DIR, day, str(id) + ".ptn")) as f:
      text = f.read()
    ptn = tak.ptn.PTN.parse(text)
    g = ptn.initial_position()
    for i, m in enumerate(ptn.moves):
      if want_move(day, id, i):
        if FLAGS.symmetries:
          ps = [(p, tak.symmetry.transform_move(s, m, g.size))
                 for (s, p) in tak.symmetry.symmetries(g)]
        else:
          ps = [(g, m)]

        if in_test_set(day, id):
          out = test
        else:
          out = train
        for (rg, rm) in ps:
          out.append(Position(day, id, rg, i, rm))

      g = g.move(m)

  try:
    os.makedirs(FLAGS.out)
  except FileExistsError:
    pass

  for (positions, path) in [(train, "train"), (test, "test")]:
    with open(os.path.join(FLAGS.out, path+".csv"), 'w') as f:
      w = csv.writer(f)
      for rec in positions:
        w.writerow((tak.ptn.format_tps(rec.pos),
                    tak.ptn.format_move(rec.move),
                    rec.day, rec.id, rec.ply,
        ))
  with open(os.path.join(FLAGS.out, 'meta.json'), 'w') as fh:
    json.dump({
      'sha1': read_git_commit(),
      'argv': sys.argv,
      'opts': vars(FLAGS),
    }, fh, indent=2)

def read_git_commit():
  sha1 = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip().decode('utf-8')
  try:
    subprocess.check_call(['git', 'diff-index', '--cached', '--quiet', 'HEAD'])
    subprocess.check_call(['git', 'diff-index', '--quiet', 'HEAD'])
  except subprocess.CalledProcessError:
    sha1 += "-dirty"
  return sha1

def arg_parser():
  parser = argparse.ArgumentParser()
  parser.add_argument('--rating', default=1600, type=int)

  group = parser.add_mutually_exclusive_group(required=True)
  group.add_argument('--stride', default=None, type=int,
                     help='select every Nth move')
  group.add_argument('--sample', default=None, type=int,
                     help='select 1/N moves at random')

  parser.add_argument('--seed', default=1, type=int,
                      help='random seed')

  parser.add_argument('--limit', default=None, type=int,
                      help='Only look at N games')

  parser.add_argument('--test-fraction', default=0.05, type=float,
                      help='select fraction of games to use for training set')

  parser.add_argument('--skip', default=5, type=int)
  parser.add_argument('--size', default=5, type=int)

  parser.add_argument('--symmetries',
                      default=True,
                      action='store_true')
  parser.add_argument('--no-symmetries',
                      action='store_false',
                      dest='symmetries')

  parser.add_argument('--out', '-o', default='data/corpus')
  return parser

if __name__ == '__main__':
  parser = arg_parser()
  FLAGS, args = parser.parse_known_args()
  main(args)
